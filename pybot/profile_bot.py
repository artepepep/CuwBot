import os
import telebot
from dotenv import load_dotenv

from utils_profile import generate_keyboard_buttons, main_buttons, prices, tables_creation, post_to_db, get_my_posts

load_dotenv()
SECRET_ID = os.getenv('TELEGRAM_PROFILE_BOT_ID')
PAYMENT_TOKEN = os.getenv('PUBLIC_PAYMENT_TOKEN')
PAYMENT_TOKEN2 = os.getenv('PUBLIC_PAYMENT_TOKEN2')


bot = telebot.TeleBot(SECRET_ID)


@bot.message_handler(commands=['start'])
def start(info):

    tables_creation()

    bot.send_message(info.chat.id, f'–ü—Ä–∏–≤—ñ—Ç, {info.from_user.first_name} {info.from_user.last_name}', reply_markup=generate_keyboard_buttons(main_buttons))
    bot.register_next_step_handler(info, post_keybord_buttons)


def post_keybord_buttons(—Åallback):
    if —Åallback.text == '–ù–æ–≤–∏–π –ü–æ—Å—Ç‚úÖ':
        bot.send_message(—Åallback.chat.id, '–ó—Ä–æ–±—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫—É –Ω–∞–∑–≤—É –∑–∞–≤–¥–∞–Ω–Ω—é(–¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤)üìç')
        bot.register_next_step_handler(—Åallback, get_name_for_post)
    elif —Åallback.text == '–ú–æ—ó –ø–æ—Å—Ç–∏üéí':
        show_user_posts(—Åallback)
    elif —Åallback.text == '–ú–æ—ó —á–∞—Ç–∏üí¨':
        bot.send_message(—Åallback.chat.id, '–ú–æ—ó —á–∞—Ç–∏üí¨')
        bot.register_next_step_handler(—Åallback, post_keybord_buttons)
    elif —Åallback.text == '–ú–æ—ó –∫–æ—à—Ç–∏üíº':
        bot.send_message(—Åallback.chat.id, '–ú–æ—ó –∫–æ—à—Ç–∏üíº')
        bot.register_next_step_handler(—Åallback, post_keybord_buttons)
    elif —Åallback.text == '–û–ø–ª–∞—Ç–∏—Ç–∏üí≤':
        pay_func(—Åallback)


# –±–µ—Ä—É –∏–º—è –¥–ª—è –ø–æ—Å—Ç–∞
def get_name_for_post(message):

    def check_name_len(message):
        if len(message.text) >= 50:
            bot.send_message(message.chat.id, 'üî¥–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º–µ–Ω—à–µ 50 —Å–∏–º–≤–æ–ª—ñ–≤üî¥')
            bot.register_next_step_handler(message, check_name_len)
        else:
            post_name = message.text
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–¥—Ä–æ–±–∏—Ü—ñ (—â–æ –± –≤–∏ —Ö–æ—Ç—ñ–ª–∏ —â–æ–± –≤–∏–∫–Ω–∞–≤–µ—Ü—å –∑—Ä–æ–±–∏–≤)üìù')
            bot.register_next_step_handler(message, get_details_for_post, post_name)

    check_name_len(message)


# –±–µ—Ä—É –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
def get_details_for_post(message, post_name):

    def check_det_len(message):
        if len(message.text) >= 1000:
            bot.send_message(message.chat.id, 'üî¥–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º–µ–Ω—à–µ 1000 —Å–∏–º–≤–æ–ª—ñ–≤üî¥')
            bot.register_next_step_handler(message, check_det_len)
        else:
            post_details = message.text
            bot.send_message(message.chat.id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –∑–∞ –ø–æ—Å—Ç(–£ —Ñ–æ—Ä–º–∞—Ç—ñ —á–∏—Å–ª–∞)üí∏')
            bot.register_next_step_handler(message, get_price_for_post, post_name, post_details)

    check_det_len(message)


# –±–µ—Ä—É —Ü–µ–Ω—É –¥–ª—è –ø–æ—Å—Ç–∞
def get_price_for_post(message, post_name, post_details):

    def check_price(message):
        if message.text.isdigit():
            post_price = float(message.text)
            add_post_to_db(message, post_name, post_details, post_price)
        else:
            bot.send_message(message.chat.id, 'üî¥–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Ü—ñ–Ω—É –∑–∞ –ø–æ—Å—Ç (—É —Ñ–æ—Ä–º–∞—Ç—ñ —á–∏—Å–ª–∞)üî¥')
            bot.register_next_step_handler(message, get_price_for_post, post_name, post_details)

    check_price(message)


# –¥–æ–±–∞–≤–ª—è—é –ø–æ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_post_to_db(message, post_name, post_details, post_price):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    customer_id = message.from_user.id
    customer_username = message.from_user.username
    customer_fn = message.from_user.first_name
    post_to_db(post_name, post_price, post_details, customer_id, customer_username, customer_fn)
    bot.send_message(message.chat.id, f'–ü–æ—Å—Ç "{post_name}" –∑ —Ü—ñ–Ω–æ—é {post_price} –≥—Ä–Ω —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!')
    bot.register_next_step_handler(message, post_keybord_buttons)


def show_user_posts(message):
    customer_id = message.from_user.id
    information = get_my_posts(customer_id)
    if information:
        post_number = 1
        for post in information:
            if not post[3]:
                user_link = f"<a href='tg://user?id={post[4]}'>{post[6]}</a>"
                post_str = f"\n\nüü¢–ü–æ—Å—Ç #{post_number}"
                post_str += f"\n\n<b>{post[0]}</b>"
                post_str += f"\n\n{post[1]}"
                post_str += f"\n\n–¶—ñ–Ω–∞: {post[2]}"
                post_str += f"\n\n–ü–∏—Å–∞—Ç–∏ {user_link}"
                bot.send_message(message.chat.id, post_str, parse_mode='HTML')
                post_number += 1
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø–æ—Å—Ç—ñ–≤ü´§")
    bot.register_next_step_handler(message, post_keybord_buttons)


def pay_func(message):
    bot.send_invoice(
        message.chat.id,  #chat_id
        'Working Time Machine', #title
        ' Want to visit your great-great-great-grandparents? Make a fortune at the races? Shake hands with Hammurabi and take a stroll in the Hanging Gardens? Order our Working Time Machine today!', #description
        'HAPPY FRIDAYS COUPON', #invoice_payload
        PAYMENT_TOKEN2, #provider_token
        'usd', #currency
        prices, #prices
        photo_url='https://hips.hearstapps.com/hmg-prod/images/bmw-vision-neue-klasse-concept-car5-64ecd9b81229e.jpg?crop=1.00xw:0.753xh;0,0.166xh&resize=1200:*',
        is_flexible=False,  # True If you need to set up Shipping Fee
        start_parameter='time-machine-example')
    bot.register_next_step_handler(message, post_keybord_buttons)


@bot.message_handler(commands=['help'])
def help(info):
    bot.send_message(info.chat.id, 'Some help')


bot.polling(none_stop=True)