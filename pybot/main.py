import telebot
from telebot import types
import sqlite3
import webbrowser
from dotenv import load_dotenv
import os

load_dotenv()
SECRET_ID = os.getenv('TELEGRAM_BOT_ID')

bot = telebot.TeleBot(SECRET_ID)

keyboard = types.ReplyKeyboardMarkup(row_width=2)
btn1 = types.KeyboardButton('–°—Ç–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–ºüë©‚Äçüíª')
btn2 = types.KeyboardButton('–ù–æ–≤–∏–π –ü–æ—Å—Ç‚úÖ')
btn3 = types.KeyboardButton('–ù–æ–≤–∞ –£–≥–æ–¥–∞üìÑ')
btn4 = types.KeyboardButton('–ú–æ—ó –ø–æ—Å—Ç–∏üéí')
btn5 = types.KeyboardButton('–ú–æ—ó —á–∞—Ç–∏üí¨')
btn6 = types.KeyboardButton('–ú–æ—ó –∫–æ—à—Ç–∏üíº')

keyboard.add(btn1)
keyboard.add(btn2, btn3)
keyboard.add(btn4, btn5)
keyboard.add(btn6)

@bot.message_handler(commands=['start'])
def start(info):
    conn = sqlite3.connect('cuwbot.sql')
    cur = conn.cursor()

    cur.execute('CREATE TABLE IF NOT EXISTS users (id int auto_increment primary key, is_bad int)')
    cur.execute('CREATE TABLE IF NOT EXISTS posts (id INTEGER PRIMARY KEY AUTOINCREMENT, publication_name VARCHAR(50), price DECIMAL(10,2), details VARCHAR(255), customer_id INTEGER, FOREIGN KEY (customer_id) REFERENCES users(id))')
    conn.commit()
    cur.close()
    conn.close()

    bot.send_message(info.chat.id, f'–ü—Ä–∏–≤—ñ—Ç, {info.from_user.first_name} {info.from_user.last_name}', reply_markup=keyboard)
    bot.register_next_step_handler(info, post_keybord_buttons)


def post_keybord_buttons(—Åallback):
    if —Åallback.text == '–°—Ç–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–ºüë©‚Äçüíª':
        bot.send_message(—Åallback.chat.id, '–°—Ç–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º')
    elif —Åallback.text == '–ù–æ–≤–∏–π –ü–æ—Å—Ç‚úÖ':
        bot.send_message(—Åallback.chat.id, '–Ø–∫–∞ –Ω–∞–∑–≤–∞ –±—É–¥–µ —É –≤–∞—à–æ–≥–æ –ø–æ—Å—Ç–∞‚ùì')
        bot.register_next_step_handler(—Åallback, get_name_for_post)
    elif —Åallback.text == '–ù–æ–≤–∞ –£–≥–æ–¥–∞üìÑ':
        bot.send_message(—Åallback.chat.id, '–ù–æ–≤–∞ –£–≥–æ–¥–∞üìÑ')
    elif —Åallback.text == '–ú–æ—ó –ø–æ—Å—Ç–∏üéí':
        bot.send_message(—Åallback.chat.id, '–ú–æ—ó –ø–æ—Å—Ç–∏üéí')
    elif —Åallback.text == '–ú–æ—ó —á–∞—Ç–∏üí¨':
        bot.send_message(—Åallback.chat.id, '–ú–æ—ó —á–∞—Ç–∏üí¨')
    elif —Åallback.text == '–ú–æ—ó –∫–æ—à—Ç–∏üíº':
        bot.send_message(—Åallback.chat.id, '–ú–æ—ó –∫–æ—à—Ç–∏üíº')
    elif —Åallback.text == '–ú—ñ–π —Ä–µ–π—Ç–∏–Ω–≥üåü':
        bot.send_message(—Åallback.chat.id, '–ú—ñ–π —Ä–µ–π—Ç–∏–Ω–≥üåü')


# –±–µ—Ä—É –∏–º—è –¥–ª—è –ø–æ—Å—Ç–∞
def get_name_for_post(message):

    def check_name_len():
        if len(message.text) >= 50:
            bot.send_message(message.chat.id, 'üî¥–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º–µ–Ω—à–µ 50 —Å–∏–º–≤–æ–ª—ñ–≤üî¥')
            bot.register_next_step_handler(message, check_name_len)
        else:
            post_name = message.text
            bot.send_message(message.chat.id, '–ó—Ä–æ–±—ñ—Ç—å –æ–ø–∏—Å –ø–æ—Å—Ç–∞')
            bot.register_next_step_handler(message, get_details_for_post, post_name)

    check_name_len()


# –±–µ—Ä—É –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
def get_details_for_post(message, post_name):

    def check_det_len():
        if len(message.text) >= 255:
            bot.send_message(message.chat.id, 'üî¥–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º–µ–Ω—à–µ 255 —Å–∏–º–≤–æ–ª—ñ–≤üî¥')
            bot.register_next_step_handler(message, check_det_len)
        else:
            post_details = message.text
            bot.send_message(message.chat.id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –∑–∞ –ø–æ—Å—Ç(–£ —Ñ–æ—Ä–º–∞—Ç—ñ —á–∏—Å–ª–∞)üí∏')
            bot.register_next_step_handler(message, get_price_for_post, post_name, post_details)

    check_det_len()


# –±–µ—Ä—É —Ü–µ–Ω—É –¥–ª—è –ø–æ—Å—Ç–∞
def get_price_for_post(message, post_name, post_details):

    def check_price():
        if message.text.isdigit():
            post_price = float(message.text)
            add_post_to_db(message, post_name, post_details, post_price)
        else:
            bot.send_message(message.chat.id, 'üî¥–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Ü—ñ–Ω—É –∑–∞ –ø–æ—Å—Ç (—É —Ñ–æ—Ä–º–∞—Ç—ñ —á–∏—Å–ª–∞)üî¥')
            bot.register_next_step_handler(message, get_price_for_post, post_name, post_details)

    check_price()


# –¥–æ–±–∞–≤–ª—è—é –ø–æ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_post_to_db(message, post_name, post_details, post_price):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('cuwbot.sql')
    cur = conn.cursor()
    # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ—Å—Ç–µ –≤ —Ç–∞–±–ª–∏—Ü—É posts
    cur.execute("INSERT INTO posts (publication_name, price, details, customer_id) VALUES (?, ?, ?, ?)", (post_name, post_price, post_details, message.from_user.id))
    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, f'–ü–æ—Å—Ç "{post_name}" –∑ —Ü—ñ–Ω–æ—é {post_price} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!')
    bot.register_next_step_handler(message, post_keybord_buttons)

@bot.message_handler(commands=['help'])
def help(info):
    bot.send_message(info.chat.id, 'Some help')

bot.polling(none_stop=True)